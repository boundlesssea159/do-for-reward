{
  "address": "0xc7eE0cF6F8992D063bD98690ED39dD6843e73214",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "calculatedFees",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "TaskAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TaskHasBeenApplied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TaskInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TaskNotExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "TaskApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "TaskCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSuccess",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "selector",
          "type": "uint64"
        }
      ],
      "name": "addDestinationContractAndSelector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "enum Tasks.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Tasks.task",
          "name": "_task",
          "type": "tuple"
        }
      ],
      "name": "addTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "applyTask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canBeAppliedNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "hasContractAddressOfChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "hasSelectorOfChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "markDone",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOfTasks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "showTasks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "enum Tasks.Status",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Tasks.task[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd48a44d20d9236c071d97f337a30eec0d4bd1e9a355be91d480d12ffe87ae5a5",
  "receipt": {
    "to": null,
    "from": "0x9DFF07AD52863E9a323321288797fDB0eb3bD569",
    "contractAddress": "0xc7eE0cF6F8992D063bD98690ED39dD6843e73214",
    "transactionIndex": 70,
    "gasUsed": "2758645",
    "logsBloom": "0x
    "blockHash": "0xc8b5e924e219b6e52ba04394b315b17e18a698e32594403a36147c5d9ecbe27b",
    "transactionHash": "0xd48a44d20d9236c071d97f337a30eec0d4bd1e9a355be91d480d12ffe87ae5a5",
    "logs": [],
    "blockNumber": 5997386,
    "cumulativeGasUsed": "13382505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF694E193200268f9a4868e4Aa017A0118C9a8177",
    "0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846",
    "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD"
  ],
  "numDeployments": 1,
  "solcInputHash": "21bfbde52129c1746a4349ae849847df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"TaskAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TaskHasBeenApplied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TaskNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TaskApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"TaskCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSuccess\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"selector\",\"type\":\"uint64\"}],\"name\":\"addDestinationContractAndSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum Tasks.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Tasks.task\",\"name\":\"_task\",\"type\":\"tuple\"}],\"name\":\"addTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"applyTask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBeAppliedNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"hasContractAddressOfChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"hasSelectorOfChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"markDone\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfTasks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showTasks\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"enum Tasks.Status\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Tasks.task[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Tasks.sol\":\"Tasks\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // Token/USD * 1e18\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint8 decimal = priceFeed.decimals();\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return uint256(uint256(answer) * 10 ** (18 - decimal));\\n    }\\n\\n    // return TokenAmount(10**18)\\n    function getTokenAmountByUSD(\\n        uint256 USDAmount, // 10**18\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 price = getPrice(priceFeed);\\n        return (USDAmount * 1e18) / price;\\n    }\\n\\n    // return USD(10**18)\\n    function getConversionRate(\\n        uint256 tokenAmount, // 10**18\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        return getPrice(priceFeed) * (tokenAmount / 1e18);\\n    }\\n}\\n\",\"keccak256\":\"0xfbb659e7d51a5a94de03b4036d1f2bf2bbabb4fcd9e408185276da9da049d8d6\",\"license\":\"UNLICENSED\"},\"contracts/Tasks.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {PriceConverter} from \\\"./PriceConverter.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract Tasks {\\n    using PriceConverter for uint256;\\n\\n    enum Status {\\n        Created,\\n        Executing,\\n        Finished\\n    }\\n\\n    struct task {\\n        string name;\\n        string description;\\n        uint256 reward; // USD\\n        Status status;\\n    }\\n\\n    struct applierInfomation {\\n        address account;\\n        uint256 chainId;\\n    }\\n\\n    struct chainContractAndSelector {\\n        address contractAddress;\\n        uint64 selector;\\n    }\\n\\n    event TaskCreated(uint256 indexed index);\\n    event TaskApplied(uint256 indexed index, address account);\\n    event TransferSuccess(address account, uint256 amount);\\n    event MessageSent(bytes32 messageId);\\n\\n    error TaskInvalid();\\n    error TaskAlreadyExists(string name);\\n    error TaskNotExist(uint256 index);\\n    error TaskHasBeenApplied(uint256 index);\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n\\n    address private owner;\\n\\n    task[] private tasks;\\n\\n    uint256 public canBeAppliedNum;\\n\\n    LinkTokenInterface private linkToken;\\n\\n    IRouterClient private router;\\n\\n    AggregatorV3Interface private priceFeed;\\n\\n    mapping(uint256 => applierInfomation) private taskToAccount;\\n    mapping(uint256 => chainContractAndSelector)\\n        private chainToContractAndSelector;\\n\\n    constructor(address _router, address _link, address _priceFeed) {\\n        owner = msg.sender;\\n        router = IRouterClient(_router);\\n        linkToken = LinkTokenInterface(_link);\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"only owner can call this function.\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function addDestinationContractAndSelector(\\n        uint256 chainId,\\n        address contractAddress,\\n        uint64 selector\\n    ) public onlyOwner {\\n        chainToContractAndSelector[chainId] = chainContractAndSelector(\\n            contractAddress,\\n            selector\\n        );\\n    }\\n\\n    function hasContractAddressOfChain(\\n        uint256 chainId\\n    ) public view returns (bool) {\\n        return\\n            chainToContractAndSelector[chainId].contractAddress != address(0);\\n    }\\n\\n    function hasSelectorOfChain(\\n        uint256 chainId\\n    ) public view onlyOwner returns (bool) {\\n        return chainToContractAndSelector[chainId].selector > 0;\\n    }\\n\\n    function addTask(task memory _task) public onlyOwner {\\n        if (!isTaskValid(_task)) {\\n            revert TaskInvalid();\\n        }\\n        if (existTask(_task.name)) {\\n            revert TaskAlreadyExists(_task.name);\\n        }\\n        tasks.push(_task);\\n        canBeAppliedNum++;\\n        emit TaskCreated(tasks.length - 1);\\n    }\\n\\n    function isTaskValid(task memory _task) internal pure returns (bool) {\\n        return\\n            bytes(_task.name).length > 0 &&\\n            bytes(_task.description).length > 0 &&\\n            _task.reward > 0 &&\\n            _task.status == Status.Created;\\n    }\\n\\n    function existTask(string memory name) internal view returns (bool) {\\n        for (uint256 i = 0; i < tasks.length; i++) {\\n            if (\\n                keccak256(abi.encodePacked(tasks[i].name)) ==\\n                keccak256(abi.encodePacked(name))\\n            ) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function numOfTasks() public view returns (uint256) {\\n        return tasks.length;\\n    }\\n\\n    function showTasks() public view returns (task[] memory, uint256[] memory) {\\n        task[] memory showAbleTasks = new task[](canBeAppliedNum);\\n        uint256[] memory indexs = new uint256[](canBeAppliedNum);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < tasks.length; i++) {\\n            if (tasks[i].status == Status.Created) {\\n                showAbleTasks[index] = tasks[i];\\n                indexs[index] = i;\\n                index++;\\n            }\\n        }\\n        return (showAbleTasks, indexs);\\n    }\\n\\n    function applyTask(uint256 chainId, uint256 index) public {\\n        taskShouldBeExist(index);\\n        if (tasks[index].status != Status.Created) {\\n            revert TaskHasBeenApplied(index);\\n        }\\n        tasks[index].status = Status.Executing;\\n        canBeAppliedNum--;\\n        taskToAccount[index] = applierInfomation(msg.sender, chainId);\\n        emit TaskApplied(index, msg.sender);\\n    }\\n\\n    function taskShouldBeExist(uint256 index) internal view {\\n        if (index >= tasks.length) {\\n            revert TaskNotExist(index);\\n        }\\n    }\\n\\n    function markDone(uint256 index) public payable onlyOwner {\\n        taskShouldBeExist(index);\\n        require(\\n            tasks[index].status != Status.Created &&\\n                tasks[index].status != Status.Finished,\\n            \\\"task doesn't execute\\\"\\n        );\\n        applierInfomation memory applier = taskToAccount[index];\\n        if (applier.chainId == block.chainid) {\\n            sendRewardOnLocalChain(applier.account, index);\\n        } else {\\n            sendRewardByCCIP(applier.chainId, index);\\n        }\\n    }\\n\\n    function sendRewardOnLocalChain(address account, uint256 index) internal {\\n        uint256 amount = tasks[index].reward * 1e18;\\n        require(\\n            address(this).balance.getConversionRate(priceFeed) >= amount,\\n            \\\"need more balance\\\"\\n        );\\n        uint256 v = amount.getTokenAmountByUSD(priceFeed);\\n        (bool success, ) = address(account).call{value: v}(\\\"\\\");\\n        if (success) {\\n            emit TransferSuccess(account, v);\\n            cleanTask(index);\\n        }\\n    }\\n\\n    function sendRewardByCCIP(uint256 chainId, uint256 index) internal {\\n        Client.EVM2AnyMessage memory message = buildCCIPMsg(chainId, index);\\n        balanceShouldMoreThanFee(chainId, message);\\n        bytes32 messageId = router.ccipSend(\\n            chainToContractAndSelector[chainId].selector,\\n            message\\n        );\\n        emit MessageSent(messageId);\\n        cleanTask(index);\\n    }\\n\\n    function buildCCIPMsg(\\n        uint256 chainId,\\n        uint256 taskIndex\\n    ) internal view returns (Client.EVM2AnyMessage memory) {\\n        return\\n            Client.EVM2AnyMessage({\\n                receiver: abi.encode(\\n                    chainToContractAndSelector[chainId].contractAddress\\n                ),\\n                data: abi.encode(msg.sender, tasks[taskIndex].reward * 1e18),\\n                tokenAmounts: new Client.EVMTokenAmount[](0),\\n                extraArgs: Client._argsToBytes(\\n                    Client.EVMExtraArgsV1({gasLimit: 980_000})\\n                ),\\n                feeToken: address(linkToken)\\n            });\\n    }\\n\\n    function balanceShouldMoreThanFee(\\n        uint256 chainId,\\n        Client.EVM2AnyMessage memory message\\n    ) internal view {\\n        uint256 fees = router.getFee(\\n            chainToContractAndSelector[chainId].selector,\\n            message\\n        );\\n        if (fees > linkToken.balanceOf(address(this)))\\n            revert NotEnoughBalance(linkToken.balanceOf(address(this)), fees);\\n    }\\n\\n    function cleanTask(uint256 taskIndex) internal {\\n        tasks[taskIndex].status = Status.Finished;\\n        delete taskToAccount[taskIndex];\\n    }\\n}\\n\",\"keccak256\":\"0xa257fab68d1a481799aa7dfcb2c32789b95ee804a42cf1518711e3e2ffd70ae8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c806379f474da1161005957806379f474da14610143578063b24f26b41461016f578063cabddbb314610198578063d7be51a5146101c1578063e1eccbef146101ec57610091565b80631649911414610096578063278d8363146100c15780634ad0e590146100ea57806358b35a8c1461010657610091565b3661009157005b600080fd5b3480156100a257600080fd5b506100ab610229565b6040516100b8919061197a565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190611a73565b610236565b005b61010460048036038101906100ff9190611ac6565b61038a565b005b34801561011257600080fd5b5061012d60048036038101906101289190611ac6565b6105d0565b60405161013a9190611b0e565b60405180910390f35b34801561014f57600080fd5b506101586106a0565b604051610166929190611e1a565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190612065565b6109b9565b005b3480156101a457600080fd5b506101bf60048036038101906101ba91906120ae565b610bc5565b005b3480156101cd57600080fd5b506101d6610d9c565b6040516101e3919061197a565b60405180910390f35b3480156101f857600080fd5b50610213600480360381019061020e9190611ac6565b610da2565b6040516102209190611b0e565b60405180910390f35b6000600180549050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb90612171565b60405180910390fd5b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018267ffffffffffffffff168152506007600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90612171565b60405180910390fd5b61042181610e11565b6000600281111561043557610434611bf4565b5b6001828154811061044957610448612191565b5b906000526020600020906004020160030160009054906101000a900460ff16600281111561047a57610479611bf4565b5b141580156104de575060028081111561049657610495611bf4565b5b600182815481106104aa576104a9612191565b5b906000526020600020906004020160030160009054906101000a900460ff1660028111156104db576104da611bf4565b5b14155b61051d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105149061220c565b60405180910390fd5b6000600660008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050468160200151036105bd576105b8816000015183610e5d565b6105cc565b6105cb816020015183611006565b5b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890612171565b60405180910390fd5b60006007600084815260200190815260200160002060000160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b606080600060025467ffffffffffffffff8111156106c1576106c0611e56565b5b6040519080825280602002602001820160405280156106fa57816020015b6106e76118b2565b8152602001906001900390816106df5790505b509050600060025467ffffffffffffffff81111561071b5761071a611e56565b5b6040519080825280602002602001820160405280156107495781602001602082028036833780820191505090505b5090506000805b6001805490508110156109ab576000600281111561077157610770611bf4565b5b6001828154811061078557610784612191565b5b906000526020600020906004020160030160009054906101000a900460ff1660028111156107b6576107b5611bf4565b5b0361099e57600181815481106107cf576107ce612191565b5b90600052602060002090600402016040518060800160405290816000820180546107f89061225b565b80601f01602080910402602001604051908101604052809291908181526020018280546108249061225b565b80156108715780601f1061084657610100808354040283529160200191610871565b820191906000526020600020905b81548152906001019060200180831161085457829003601f168201915b5050505050815260200160018201805461088a9061225b565b80601f01602080910402602001604051908101604052809291908181526020018280546108b69061225b565b80156109035780601f106108d857610100808354040283529160200191610903565b820191906000526020600020905b8154815290600101906020018083116108e657829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff16600281111561093b5761093a611bf4565b5b600281111561094d5761094c611bf4565b5b8152505084838151811061096457610963612191565b5b60200260200101819052508083838151811061098357610982612191565b5b602002602001018181525050818061099a906122bb565b9250505b8080600101915050610750565b508282945094505050509091565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3e90612171565b60405180910390fd5b610a5081611132565b610a86576040517f2cbc75e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a938160000151611198565b15610ad95780600001516040517f1afad088000000000000000000000000000000000000000000000000000000008152600401610ad0919061233c565b60405180910390fd5b60018190806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000019081610b1a919061250a565b506020820151816001019081610b30919061250a565b506040820151816002015560608201518160030160006101000a81548160ff02191690836002811115610b6657610b65611bf4565b5b0217905550505060026000815480929190610b80906122bb565b919050555060018080549050610b9691906125dc565b7fba46948ae716559226cede7aac0175e8ddd11b7cb3ea0369c9f218ef908b87d560405160405180910390a250565b610bce81610e11565b60006002811115610be257610be1611bf4565b5b60018281548110610bf657610bf5612191565b5b906000526020600020906004020160030160009054906101000a900460ff166002811115610c2757610c26611bf4565b5b14610c6957806040517ff04d971a000000000000000000000000000000000000000000000000000000008152600401610c60919061197a565b60405180910390fd5b6001808281548110610c7e57610c7d612191565b5b906000526020600020906004020160030160006101000a81548160ff02191690836002811115610cb157610cb0611bf4565b5b021790555060026000815480929190610cc990612610565b919050555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152506006600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050807f7f4b15de145103c2f48b4429df1c147497eb30d764058cdbdd0e7b7ad82d8fac33604051610d909190612648565b60405180910390a25050565b60025481565b60008073ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6001805490508110610e5a57806040517f6a938592000000000000000000000000000000000000000000000000000000008152600401610e51919061197a565b60405180910390fd5b50565b6000670de0b6b3a764000060018381548110610e7c57610e7b612191565b5b906000526020600020906004020160020154610e989190612663565b905080610ed0600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff164761124690919063ffffffff16565b1015610f11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f08906126f1565b60405180910390fd5b6000610f48600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361127790919063ffffffff16565b905060008473ffffffffffffffffffffffffffffffffffffffff1682604051610f7090612742565b60006040518083038185875af1925050503d8060008114610fad576040519150601f19603f3d011682016040523d82523d6000602084013e610fb2565b606091505b505090508015610fff577f2e1ece5fb4a04cb9407bb825ceb4c6d6d402c18ba1cbe2054241fb1a86fd58da8583604051610fed929190612757565b60405180910390a1610ffe846112ad565b5b5050505050565b60006110128383611343565b905061101e83826114cd565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166396f4e9f96007600087815260200190815260200160002060000160149054906101000a900467ffffffffffffffff16846040518363ffffffff1660e01b81526004016110a792919061295c565b6020604051808303816000875af11580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea91906129c2565b90507f54791b38f3859327992a1ca0590ad3c0f08feba98d1a4f56ab0dca74d203392a8160405161111b91906129fe565b60405180910390a161112c836112ad565b50505050565b60008082600001515111801561114d57506000826020015151115b801561115d575060008260400151115b801561119157506000600281111561117857611177611bf4565b5b8260600151600281111561118f5761118e611bf4565b5b145b9050919050565b600080600090505b60018054905081101561123b57826040516020016111be9190612a55565b60405160208183030381529060405280519060200120600182815481106111e8576111e7612191565b5b90600052602060002090600402016000016040516020016112099190612aef565b604051602081830303815290604052805190602001200361122e576001915050611241565b80806001019150506111a0565b50600090505b919050565b6000670de0b6b3a76400008361125c9190612b35565b6112658361171b565b61126f9190612663565b905092915050565b6000806112838361171b565b905080670de0b6b3a76400008561129a9190612663565b6112a49190612b35565b91505092915050565b6002600182815481106112c3576112c2612191565b5b906000526020600020906004020160030160006101000a81548160ff021916908360028111156112f6576112f5611bf4565b5b021790555060066000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055505050565b61134b6118ec565b6040518060a001604052806007600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405160200161139d9190612648565b604051602081830303815290604052815260200133670de0b6b3a7640000600186815481106113cf576113ce612191565b5b9060005260206000209060040201600201546113eb9190612663565b6040516020016113fc929190612757565b6040516020818303038152906040528152602001600067ffffffffffffffff81111561142b5761142a611e56565b5b60405190808252806020026020018201604052801561146457816020015b611451611931565b8152602001906001900390816114495790505b508152602001600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016114c26040518060200160405280620ef420815250611833565b815250905092915050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320487ded6007600086815260200190815260200160002060000160149054906101000a900467ffffffffffffffff16846040518363ffffffff1660e01b815260040161155692919061295c565b602060405180830381865afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190612b7b565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115f49190612648565b602060405180830381865afa158015611611573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116359190612b7b565b81111561171657600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116979190612648565b602060405180830381865afa1580156116b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d89190612b7b565b816040517f8f0f420600000000000000000000000000000000000000000000000000000000815260040161170d929190612ba8565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d9190612c0a565b905060008373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118009190612caf565b5050509150508160126118139190612d2a565b600a61181f9190612e92565b8161182a9190612663565b92505050919050565b60606397a657c960e01b8260405160240161184e9190612ef9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b6040518060800160405280606081526020016060815260200160008152602001600060028111156118e6576118e5611bf4565b5b81525090565b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000819050919050565b61197481611961565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000604051905090565b600080fd5b600080fd5b6119b281611961565b81146119bd57600080fd5b50565b6000813590506119cf816119a9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a00826119d5565b9050919050565b611a10816119f5565b8114611a1b57600080fd5b50565b600081359050611a2d81611a07565b92915050565b600067ffffffffffffffff82169050919050565b611a5081611a33565b8114611a5b57600080fd5b50565b600081359050611a6d81611a47565b92915050565b600080600060608486031215611a8c57611a8b61199f565b5b6000611a9a868287016119c0565b9350506020611aab86828701611a1e565b9250506040611abc86828701611a5e565b9150509250925092565b600060208284031215611adc57611adb61199f565b5b6000611aea848285016119c0565b91505092915050565b60008115159050919050565b611b0881611af3565b82525050565b6000602082019050611b236000830184611aff565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b8f578082015181840152602081019050611b74565b60008484015250505050565b6000601f19601f8301169050919050565b6000611bb782611b55565b611bc18185611b60565b9350611bd1818560208601611b71565b611bda81611b9b565b840191505092915050565b611bee81611961565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611c3457611c33611bf4565b5b50565b6000819050611c4582611c23565b919050565b6000611c5582611c37565b9050919050565b611c6581611c4a565b82525050565b60006080830160008301518482036000860152611c888282611bac565b91505060208301518482036020860152611ca28282611bac565b9150506040830151611cb76040860182611be5565b506060830151611cca6060860182611c5c565b508091505092915050565b6000611ce18383611c6b565b905092915050565b6000602082019050919050565b6000611d0182611b29565b611d0b8185611b34565b935083602082028501611d1d85611b45565b8060005b85811015611d595784840389528151611d3a8582611cd5565b9450611d4583611ce9565b925060208a01995050600181019050611d21565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611da38383611be5565b60208301905092915050565b6000602082019050919050565b6000611dc782611d6b565b611dd18185611d76565b9350611ddc83611d87565b8060005b83811015611e0d578151611df48882611d97565b9750611dff83611daf565b925050600181019050611de0565b5085935050505092915050565b60006040820190508181036000830152611e348185611cf6565b90508181036020830152611e488184611dbc565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e8e82611b9b565b810181811067ffffffffffffffff82111715611ead57611eac611e56565b5b80604052505050565b6000611ec0611995565b9050611ecc8282611e85565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff821115611efb57611efa611e56565b5b611f0482611b9b565b9050602081019050919050565b82818337600083830152505050565b6000611f33611f2e84611ee0565b611eb6565b905082815260208101848484011115611f4f57611f4e611edb565b5b611f5a848285611f11565b509392505050565b600082601f830112611f7757611f76611ed6565b5b8135611f87848260208601611f20565b91505092915050565b60038110611f9d57600080fd5b50565b600081359050611faf81611f90565b92915050565b600060808284031215611fcb57611fca611e51565b5b611fd56080611eb6565b9050600082013567ffffffffffffffff811115611ff557611ff4611ed1565b5b61200184828501611f62565b600083015250602082013567ffffffffffffffff81111561202557612024611ed1565b5b61203184828501611f62565b6020830152506040612045848285016119c0565b604083015250606061205984828501611fa0565b60608301525092915050565b60006020828403121561207b5761207a61199f565b5b600082013567ffffffffffffffff811115612099576120986119a4565b5b6120a584828501611fb5565b91505092915050565b600080604083850312156120c5576120c461199f565b5b60006120d3858286016119c0565b92505060206120e4858286016119c0565b9150509250929050565b600082825260208201905092915050565b7f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e2e000000000000000000000000000000000000000000000000000000000000602082015250565b600061215b6022836120ee565b9150612166826120ff565b604082019050919050565b6000602082019050818103600083015261218a8161214e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f7461736b20646f65736e27742065786563757465000000000000000000000000600082015250565b60006121f66014836120ee565b9150612201826121c0565b602082019050919050565b60006020820190508181036000830152612225816121e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061227357607f821691505b6020821081036122865761228561222c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122c682611961565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122f8576122f761228c565b5b600182019050919050565b600061230e82611b55565b61231881856120ee565b9350612328818560208601611b71565b61233181611b9b565b840191505092915050565b600060208201905081810360008301526123568184612303565b905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612383565b6123ca8683612383565b95508019841693508086168417925050509392505050565b6000819050919050565b60006124076124026123fd84611961565b6123e2565b611961565b9050919050565b6000819050919050565b612421836123ec565b61243561242d8261240e565b848454612390565b825550505050565b600090565b61244a61243d565b612455818484612418565b505050565b5b818110156124795761246e600082612442565b60018101905061245b565b5050565b601f8211156124be5761248f8161235e565b61249884612373565b810160208510156124a7578190505b6124bb6124b385612373565b83018261245a565b50505b505050565b600082821c905092915050565b60006124e1600019846008026124c3565b1980831691505092915050565b60006124fa83836124d0565b9150826002028217905092915050565b61251382611b55565b67ffffffffffffffff81111561252c5761252b611e56565b5b612536825461225b565b61254182828561247d565b600060209050601f8311600181146125745760008415612562578287015190505b61256c85826124ee565b8655506125d4565b601f1984166125828661235e565b60005b828110156125aa57848901518255600182019150602085019450602081019050612585565b868310156125c757848901516125c3601f8916826124d0565b8355505b6001600288020188555050505b505050505050565b60006125e782611961565b91506125f283611961565b925082820390508181111561260a5761260961228c565b5b92915050565b600061261b82611961565b91506000820361262e5761262d61228c565b5b600182039050919050565b612642816119f5565b82525050565b600060208201905061265d6000830184612639565b92915050565b600061266e82611961565b915061267983611961565b925082820261268781611961565b9150828204841483151761269e5761269d61228c565b5b5092915050565b7f6e656564206d6f72652062616c616e6365000000000000000000000000000000600082015250565b60006126db6011836120ee565b91506126e6826126a5565b602082019050919050565b6000602082019050818103600083015261270a816126ce565b9050919050565b600081905092915050565b50565b600061272c600083612711565b91506127378261271c565b600082019050919050565b600061274d8261271f565b9150819050919050565b600060408201905061276c6000830185612639565b612779602083018461196b565b9392505050565b61278981611a33565b82525050565b600081519050919050565b600082825260208201905092915050565b60006127b68261278f565b6127c0818561279a565b93506127d0818560208601611b71565b6127d981611b9b565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612819816119f5565b82525050565b6040820160008201516128356000850182612810565b5060208201516128486020850182611be5565b50505050565b600061285a838361281f565b60408301905092915050565b6000602082019050919050565b600061287e826127e4565b61288881856127ef565b935061289383612800565b8060005b838110156128c45781516128ab888261284e565b97506128b683612866565b925050600181019050612897565b5085935050505092915050565b600060a08301600083015184820360008601526128ee82826127ab565b9150506020830151848203602086015261290882826127ab565b915050604083015184820360408601526129228282612873565b91505060608301516129376060860182612810565b506080830151848203608086015261294f82826127ab565b9150508091505092915050565b60006040820190506129716000830185612780565b818103602083015261298381846128d1565b90509392505050565b6000819050919050565b61299f8161298c565b81146129aa57600080fd5b50565b6000815190506129bc81612996565b92915050565b6000602082840312156129d8576129d761199f565b5b60006129e6848285016129ad565b91505092915050565b6129f88161298c565b82525050565b6000602082019050612a1360008301846129ef565b92915050565b600081905092915050565b6000612a2f82611b55565b612a398185612a19565b9350612a49818560208601611b71565b80840191505092915050565b6000612a618284612a24565b915081905092915050565b60008154612a798161225b565b612a838186612a19565b94506001821660008114612a9e5760018114612ab357612ae6565b60ff1983168652811515820286019350612ae6565b612abc8561235e565b60005b83811015612ade57815481890152600182019150602081019050612abf565b838801955050505b50505092915050565b6000612afb8284612a6c565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b4082611961565b9150612b4b83611961565b925082612b5b57612b5a612b06565b5b828204905092915050565b600081519050612b75816119a9565b92915050565b600060208284031215612b9157612b9061199f565b5b6000612b9f84828501612b66565b91505092915050565b6000604082019050612bbd600083018561196b565b612bca602083018461196b565b9392505050565b600060ff82169050919050565b612be781612bd1565b8114612bf257600080fd5b50565b600081519050612c0481612bde565b92915050565b600060208284031215612c2057612c1f61199f565b5b6000612c2e84828501612bf5565b91505092915050565b600069ffffffffffffffffffff82169050919050565b612c5681612c37565b8114612c6157600080fd5b50565b600081519050612c7381612c4d565b92915050565b6000819050919050565b612c8c81612c79565b8114612c9757600080fd5b50565b600081519050612ca981612c83565b92915050565b600080600080600060a08688031215612ccb57612cca61199f565b5b6000612cd988828901612c64565b9550506020612cea88828901612c9a565b9450506040612cfb88828901612b66565b9350506060612d0c88828901612b66565b9250506080612d1d88828901612c64565b9150509295509295909350565b6000612d3582612bd1565b9150612d4083612bd1565b9250828203905060ff811115612d5957612d5861228c565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115612db657808604811115612d9257612d9161228c565b5b6001851615612da15780820291505b8081029050612daf85612d5f565b9450612d76565b94509492505050565b600082612dcf5760019050612e8b565b81612ddd5760009050612e8b565b8160018114612df35760028114612dfd57612e2c565b6001915050612e8b565b60ff841115612e0f57612e0e61228c565b5b8360020a915084821115612e2657612e2561228c565b5b50612e8b565b5060208310610133831016604e8410600b8410161715612e615782820a905083811115612e5c57612e5b61228c565b5b612e8b565b612e6e8484846001612d6c565b92509050818404811115612e8557612e8461228c565b5b81810290505b9392505050565b6000612e9d82611961565b9150612ea883612bd1565b9250612ed57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612dbf565b905092915050565b602082016000820151612ef36000850182611be5565b50505050565b6000602082019050612f0e6000830184612edd565b9291505056fea2646970667358221220ff9d12f19a2d56c18c21b38a53bc4152165cb2e4c7693e9310f117e99703f3e764736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 494,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 498,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "tasks",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(task)442_storage)dyn_storage"
      },
      {
        "astId": 500,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "canBeAppliedNum",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "linkToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(LinkTokenInterface)326"
      },
      {
        "astId": 506,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "router",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRouterClient)51"
      },
      {
        "astId": 509,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "priceFeed",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(AggregatorV3Interface)231"
      },
      {
        "astId": 514,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "taskToAccount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(applierInfomation)447_storage)"
      },
      {
        "astId": 519,
        "contract": "contracts/Tasks.sol:Tasks",
        "label": "chainToContractAndSelector",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(chainContractAndSelector)452_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(task)442_storage)dyn_storage": {
        "base": "t_struct(task)442_storage",
        "encoding": "dynamic_array",
        "label": "struct Tasks.task[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)231": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IRouterClient)51": {
        "encoding": "inplace",
        "label": "contract IRouterClient",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)326": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_enum(Status)432": {
        "encoding": "inplace",
        "label": "enum Tasks.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(applierInfomation)447_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Tasks.applierInfomation)",
        "numberOfBytes": "32",
        "value": "t_struct(applierInfomation)447_storage"
      },
      "t_mapping(t_uint256,t_struct(chainContractAndSelector)452_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Tasks.chainContractAndSelector)",
        "numberOfBytes": "32",
        "value": "t_struct(chainContractAndSelector)452_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(applierInfomation)447_storage": {
        "encoding": "inplace",
        "label": "struct Tasks.applierInfomation",
        "members": [
          {
            "astId": 444,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 446,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(chainContractAndSelector)452_storage": {
        "encoding": "inplace",
        "label": "struct Tasks.chainContractAndSelector",
        "members": [
          {
            "astId": 449,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "contractAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 451,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "selector",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(task)442_storage": {
        "encoding": "inplace",
        "label": "struct Tasks.task",
        "members": [
          {
            "astId": 434,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 436,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 438,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 441,
            "contract": "contracts/Tasks.sol:Tasks",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)432"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}